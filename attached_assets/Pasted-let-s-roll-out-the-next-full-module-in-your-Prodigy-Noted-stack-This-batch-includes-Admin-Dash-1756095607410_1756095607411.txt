letâ€™s roll out the next full module in your Prodigy Noted stack. This batch includes:

ðŸ§­ Admin Dashboard scaffolding

ðŸ“Š Leaderboard logic

ðŸ§¾ Stripe webhook listener

ðŸ§  Referral leaderboard

ðŸ§¼ Deployment hygiene

ðŸ“˜ Contributor docs

Everything is copy-pasteable and deploy-safe. Letâ€™s go:

ðŸ§­ 1. Admin Dashboard (src/pages/AdminDashboard.tsx)
tsx
import { useEffect, useState } from 'react';
import { getAdminStats } from '../services/api';

export default function AdminDashboard() {
  const [stats, setStats] = useState(null);

  useEffect(() => {
    getAdminStats().then(setStats);
  }, []);

  if (!stats) return <p>Loading...</p>;

  return (
    <div>
      <h2>Admin Dashboard</h2>
      <p>Total Users: {stats.totalUsers}</p>
      <p>Active Battles: {stats.activeBattles}</p>
      <p>Trial Conversions: {stats.trialConversions}</p>
      <p>Top Referrers:</p>
      <ul>
        {stats.topReferrers.map((r, i) => (
          <li key={i}>{r.username} â€” {r.referrals} referrals</li>
        ))}
      </ul>
    </div>
  );
}
ðŸ“Š 2. Leaderboard Logic (src/pages/Leaderboard.tsx)
tsx
import { useEffect, useState } from 'react';
import { getLeaderboard } from '../services/api';

export default function Leaderboard() {
  const [leaders, setLeaders] = useState([]);

  useEffect(() => {
    getLeaderboard().then(setLeaders);
  }, []);

  return (
    <div>
      <h2>ðŸ”¥ Top Artists</h2>
      <ul>
        {leaders.map((artist, i) => (
          <li key={i}>
            {i + 1}. {artist.name} â€” {artist.votes} votes
          </li>
        ))}
      </ul>
    </div>
  );
}
ðŸ§¾ 3. Stripe Webhook Listener (routes/webhook.ts)
ts
import express from 'express';
import Stripe from 'stripe';
import bodyParser from 'body-parser';

const router = express.Router();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2022-11-15' });

router.post('/webhook', bodyParser.raw({ type: 'application/json' }), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = stripe.webhooks.constructEvent(req.body, sig!, process.env.STRIPE_WEBHOOK_SECRET!);
  } catch (err) {
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'checkout.session.completed') {
    const session = event.data.object;
    // Update DB with active subscription
  }

  res.json({ received: true });
});

export default router;
ðŸ§  4. Referral Leaderboard Schema (models/Referral.ts)
ts
import mongoose from 'mongoose';

const ReferralSchema = new mongoose.Schema({
  referrerId: { type: String, required: true },
  referredUserId: { type: String, required: true },
  timestamp: { type: Date, default: Date.now },
});

export default mongoose.model('Referral', ReferralSchema);
ðŸ§¼ 5. Deployment Hygiene (package.json scripts)
json
"scripts": {
  "dev": "vite",
  "build": "vite build",
  "start": "node index.js",
  "lint": "eslint . --ext .ts,.tsx",
  "preview": "vite preview"
}
ðŸ“˜ 6. Contributor Docs (CONTRIBUTING.md)
md
# Contributing to Prodigy Noted

## Setup

1. Clone repo
2. Run `npm install`
3. Add `.env` with Stripe, Supabase, RapidAPI keys
4. Run `npm run dev`

## Folder Structure

- `src/components`: UI elements
- `src/pages`: Route views
- `src/services`: API logic
- `routes/`: Express backend
- `models/`: MongoDB schemas

## Dev Tips

- Use `npm run lint` before commits
- Validate UI in mobile and desktop
- Document all new API routes in `README.md`
âœ… Summary of What This Adds
Feature	Status
Admin dashboard	âœ… Added
Leaderboard page	âœ… Added
Stripe webhook	âœ… Added
Referral tracking	âœ… Added
Deployment scripts	âœ… Added
Contributor docs	âœ… Added
